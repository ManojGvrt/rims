---
import Icon from './Icon.astro';

interface Props {
  href?: string;
  label?: string;
  variant?: 'default' | 'minimal' | 'text';
  size?: 'small' | 'medium' | 'large';
  showIcon?: boolean;
  class?: string;
}

const {
  href,
  label = 'Back',
  variant = 'default',
  size = 'medium',
  showIcon = true,
  class: className,
} = Astro.props;
---

<button
  class:list={[
    'back-button',
    `back-button--${variant}`,
    `back-button--${size}`,
    className
  ]}
  data-href={href}
  aria-label={showIcon && !label ? 'Go back' : undefined}
>
  {showIcon && (
    <Icon name="arrow-left" size={size === 'small' ? 16 : size === 'large' ? 24 : 20} />
  )}
  {label && <span class="back-button-label">{label}</span>}
</button>

<style>
  .back-button {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    border: none;
    background: none;
    cursor: pointer;
    color: var(--secondary-color);
    font-family: inherit;
    font-size: 1rem;
    transition: all 0.2s ease;
    padding: 0;
  }

  /* Variants */
  .back-button--default {
    background: rgba(245, 245, 240, 0.05);
    border: 1px solid rgba(245, 245, 240, 0.1);
    border-radius: 8px;
    padding: 0.5rem 1rem;
  }

  .back-button--default:hover {
    background: rgba(245, 245, 240, 0.08);
    transform: translateX(-2px);
  }

  .back-button--minimal {
    padding: 0.5rem;
    border-radius: 8px;
  }

  .back-button--minimal:hover {
    background: rgba(245, 245, 240, 0.05);
    transform: translateX(-2px);
  }

  .back-button--text {
    opacity: 0.8;
  }

  .back-button--text:hover {
    opacity: 1;
    transform: translateX(-2px);
  }

  /* Sizes */
  .back-button--small {
    font-size: 0.875rem;
  }

  .back-button--small.back-button--default {
    padding: 0.375rem 0.75rem;
  }

  .back-button--large {
    font-size: 1.125rem;
  }

  .back-button--large.back-button--default {
    padding: 0.625rem 1.25rem;
  }

  /* Active state */
  .back-button:active {
    transform: translateX(-1px);
  }

  /* Focus state */
  .back-button:focus-visible {
    outline: 2px solid var(--accent-color);
    outline-offset: 2px;
  }

  /* Disabled state */
  .back-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  @media (max-width: 768px) {
    .back-button--default {
      padding: 0.375rem 0.75rem;
    }
  }
</style>

<script>
  class BackButtonManager {
    private buttons: NodeListOf<HTMLButtonElement>;

    constructor() {
      this.buttons = document.querySelectorAll('.back-button');
      this.initializeButtons();
    }

    private initializeButtons() {
      this.buttons.forEach(button => {
        button.addEventListener('click', (e) => {
          e.preventDefault();
          this.handleClick(button);
        });
      });
    }

    private handleClick(button: HTMLButtonElement) {
      const customHref = button.dataset.href;

      if (customHref) {
        // Use custom route if provided
        window.location.href = customHref;
      } else if (window.history.length > 1) {
        // Go back in history if possible
        window.history.back();
      } else {
        // Fallback to homepage if no history
        window.location.href = '/';
      }
    }

    private shouldEnableButton(button: HTMLButtonElement): boolean {
      const customHref = button.dataset.href;
      return customHref !== undefined || window.history.length > 1;
    }
  }

  // Initialize back buttons when the DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    new BackButtonManager();
  });

  // Update button state when the page is loaded from history
  window.addEventListener('pageshow', (event) => {
    if (event.persisted) {
      new BackButtonManager();
    }
  });
</script>
