---
import Button from './Button.astro';
import Icon from './Icon.astro';

interface Props {
  id: string;
  title: string;
  size?: 'small' | 'medium' | 'large';
  closeOnOverlayClick?: boolean;
}

const {
  id,
  title,
  size = 'medium',
  closeOnOverlayClick = true,
} = Astro.props;
---

<div 
  id={id}
  class:list={['modal', `modal--${size}`]}
  role="dialog"
  aria-modal="true"
  aria-labelledby={`${id}-title`}
  data-close-on-overlay={closeOnOverlayClick}
>
  <div class="modal-overlay"></div>
  
  <div class="modal-container">
    <div class="modal-header">
      <h2 id={`${id}-title`}>{title}</h2>
      <button class="close-button" aria-label="Close modal">
        <Icon name="close" size={20} />
      </button>
    </div>
    
    <div class="modal-content">
      <slot />
    </div>
    
    <div class="modal-footer">
      <slot name="footer">
        <Button variant="secondary" data-close>Cancel</Button>
        <Button variant="primary" data-confirm>Confirm</Button>
      </slot>
    </div>
  </div>
</div>

<style>
  .modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 1rem;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    z-index: 1000;
  }

  .modal[data-open="true"] {
    opacity: 1;
    visibility: visible;
  }

  .modal-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(4px);
  }

  .modal-container {
    position: relative;
    background: var(--primary-color);
    border: 1px solid rgba(245, 245, 240, 0.1);
    border-radius: 12px;
    width: 100%;
    max-height: 90vh;
    overflow-y: auto;
    transform: translateY(20px);
    transition: transform 0.3s ease;
  }

  .modal[data-open="true"] .modal-container {
    transform: translateY(0);
  }

  .modal--small .modal-container {
    max-width: 400px;
  }

  .modal--medium .modal-container {
    max-width: 600px;
  }

  .modal--large .modal-container {
    max-width: 800px;
  }

  .modal-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1.5rem;
    border-bottom: 1px solid rgba(245, 245, 240, 0.1);
  }

  .modal-header h2 {
    margin: 0;
    font-size: 1.5rem;
    color: var(--secondary-color);
  }

  .close-button {
    background: none;
    border: none;
    color: var(--secondary-color);
    cursor: pointer;
    padding: 0.5rem;
    transition: all 0.2s ease;
    line-height: 0;
  }

  .close-button:hover {
    color: var(--accent-color);
    transform: scale(1.1);
  }

  .modal-content {
    padding: 1.5rem;
  }

  .modal-footer {
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
    padding: 1.5rem;
    border-top: 1px solid rgba(245, 245, 240, 0.1);
  }

  @media (max-width: 768px) {
    .modal-container {
      margin: 0;
      max-height: 100vh;
      border-radius: 0;
    }
  }
</style>

<script>
  class ModalManager {
    constructor() {
      this.initializeModals();
    }

    initializeModals() {
      document.querySelectorAll('.modal').forEach(modal => {
        const closeOnOverlay = modal.getAttribute('data-close-on-overlay') === 'true';
        const overlay = modal.querySelector('.modal-overlay');
        const closeButton = modal.querySelector('.close-button');
        const cancelButton = modal.querySelector('[data-close]');
        
        if (closeOnOverlay && overlay) {
          overlay.addEventListener('click', () => this.closeModal(modal));
        }
        
        if (closeButton) {
          closeButton.addEventListener('click', () => this.closeModal(modal));
        }
        
        if (cancelButton) {
          cancelButton.addEventListener('click', () => this.closeModal(modal));
        }
      });
    }

    openModal(modalId: string) {
      const modal = document.getElementById(modalId);
      if (modal) {
        modal.setAttribute('data-open', 'true');
        document.body.style.overflow = 'hidden';
      }
    }

    closeModal(modal: Element) {
      modal.setAttribute('data-open', 'false');
      document.body.style.overflow = '';
    }
  }

  // Initialize modal manager
  window.modalManager = new ModalManager();
</script>
